load("~/Desktop/ExamPackage/data/transactions.rda")
View(transactions)
str(transactions)
#### day1
setwd("~/Dropbox/#+ Advanced Python & R - MASTER-FOLDER/exams/R/daily/day1")
Customer <- sample(100:999,25)
SalesData <- data.frame(Customer = paste0("C_",Customer),
PurchAmount = plyr::round_any(as.numeric(paste0(sample(100:399,75), ".", sample(10:95,75, replace=T))), 0.05),
Cost = plyr::round_any(as.numeric(paste0(sample(20:90,75, replace=T), ".", sample(10:95,75))), 0.05)
)
SalesData$Customer <- as.character(SalesData$Customer)
SalesData <- SalesData[order(SalesData$Customer),]
SalesData$OrderNumber <- ave(SalesData$PurchAmount, SalesData$Customer, FUN = seq_along)
SalesData <- SalesData[,c(1, 4, 2, 3)]
rownames(SalesData)
1:length(SalesData)
rownames(SalesData) <- 1:nrow(SalesData)
library(ExamPackage)
time_unit <- sample(c("day", "year", "quarter", "week"),1)
time_unit
date_sampel <- sample(seq(min(transactions$TransDate), min(transactions$TransDate), by="day"), 1)
transactions$TransDate
transactions$TransDate <- dmy(transactions$TransDate, tz="UTC")
time_unit <- sample(c("day", "year", "quarter", "week"),1)
date_sampel <- sample(seq(min(transactions$TransDate), min(transactions$TransDate), by="day"), 1)
date_sampel
date_sampel <- as.character(sample(seq(min(transactions$TransDate), min(transactions$TransDate), by="day"), 1))
date_sampel
date_sampel <- sample(seq(min(transactions$TransDate), min(transactions$TransDate), by="day"), 1)
date_sampel <- as.character(sample(seq(min(transactions$TransDate), min(transactions$TransDate), by="day"), 1))
# function
get_best_customer <- function(x, date){
# transform data
x <- data.table(x)
x$TransDate <-  dmy(x$TransDate, tz="UTC")
#calculate floor date
x$TransDate_floor <- floor_date(x$TransDate, time_unit)
#calculate floor date
date_floor <- floor_date(ymd(date, tz="UTC"), time_unit)
# calculate profit per customer
x$Profit_Customer <-  x$PurchAmount - x$Cost
# sum profit per unit
x_profit_unit <- x[, list(Profit_Customer_floor= sum(Profit_Customer)), by=.(Customer, TransDate_floor)]
# time unit
x_profit_unit_time <- x_profit_unit[TransDate_floor == date_floor]
# best customer
Best_Profit <- max(x_profit_unit_time $Profit_Customer_floor)
Best_Custsomer <- x_profit_unit_time [Profit_Customer_floor==Best_Profit, Customer]
results <- list(date, Best_Custsomer, Best_Profit)
names(results) <- c("Date", "Best custsomer", "Best profit")
return(results)
}
get_best_customer(transactions, date_sample)
date_sample <- as.character(sample(seq(min(transactions$TransDate), min(transactions$TransDate), by="day"), 1))
get_best_customer(transactions, date_sample)
# transform data
x <- data.table(transactions)
x$TransDate <-  dmy(x$TransDate, tz="UTC")
x
x
x
date_sample <- as.character(sample(seq(min(dmy(transactions$TransDate, tz="UTC")), max(dmy(transactions$TransDate, tz="UTC")), by="day"), 1))
data("transactions")
time_unit <- sample(c("day", "year", "quarter", "week"),1)
date_sample <- as.character(sample(seq(min(dmy(transactions$TransDate, tz="UTC")), max(dmy(transactions$TransDate, tz="UTC")), by="day"), 1))
date_sample
time_unit
# function
get_best_customer <- function(x, date){
# transform data
x <- data.table(x)
x$TransDate <-  dmy(x$TransDate, tz="UTC")
#calculate floor date
x$TransDate_floor <- floor_date(x$TransDate, time_unit)
#calculate floor date
date_floor <- floor_date(ymd(date, tz="UTC"), time_unit)
# calculate profit per customer
x$Profit_Customer <-  x$PurchAmount - x$Cost
# sum profit per unit
x_profit_unit <- x[, list(Profit_Customer_floor= sum(Profit_Customer)), by=.(Customer, TransDate_floor)]
# time unit
x_profit_unit_time <- x_profit_unit[TransDate_floor == date_floor]
# best customer
Best_Profit <- max(x_profit_unit_time $Profit_Customer_floor)
Best_Custsomer <- x_profit_unit_time [Profit_Customer_floor==Best_Profit, Customer]
results <- list(date, Best_Custsomer, Best_Profit)
names(results) <- c("Date", "Best custsomer", "Best profit")
return(results)
}
get_best_customer(transactions, date_sample)
get_best_customer(transactions, date_sample)[2]
get_best_customer(transactions, date_sample, time_unit2 = "month")
# function
get_best_customer <- function(x, date, time_unit2=time_unit){
# transform data
x <- data.table(x)
x$TransDate <-  dmy(x$TransDate, tz="UTC")
#calculate floor date
x$TransDate_floor <- floor_date(x$TransDate, time_unit2)
#calculate floor date
date_floor <- floor_date(ymd(date, tz="UTC"), time_unit2)
# calculate profit per customer
x$Profit_Customer <-  x$PurchAmount - x$Cost
# sum profit per unit
x_profit_unit <- x[, list(Profit_Customer_floor= sum(Profit_Customer)), by=.(Customer, TransDate_floor)]
# time unit
x_profit_unit_time <- x_profit_unit[TransDate_floor == date_floor]
# best customer
Best_Profit <- max(x_profit_unit_time $Profit_Customer_floor)
Best_Custsomer <- x_profit_unit_time [Profit_Customer_floor==Best_Profit, Customer]
results <- list(date, Best_Custsomer, Best_Profit)
names(results) <- c("Date", "Best custsomer", "Best profit")
return(results)
}
get_best_customer(transactions, date_sample, time_unit2 = "month")
sol1 <- get_best_customer(transactions, date_sample, time_unit2 = "month")[2]
#### day1
setwd("~/Dropbox/#+ Advanced Python & R - MASTER-FOLDER/exams/R/daily/day1")
exm <- list(
"Question1"   = c("day1_2.Rmd"),
"Question2"   = c("day1_3.Rmd")
)
# define number of points to pass the test and number of students taking the test
pass <- 1
number.students <- 40
set.seed(123)
test <- exams2openolat(exm, n = number.students, name = "R-daily-exams-day1",
points = 1, maxattempts = 0, cutvalue = pass, solutionswitch = FALSE,
duration = 15, nsamp = length(exm[[1]]),
stitle = names(exm), ititle = "Question",
navigation = "linear", shufflesections = TRUE,
adescription = "", sdescription = "",
base64 = FALSE,table = TRUE,
eval = list(partial = T))
library("exams")
#### day1
setwd("~/Dropbox/#+ Advanced Python & R - MASTER-FOLDER/exams/R/daily/day1")
exm <- list(
"Question1"   = c("day1_2.Rmd"),
"Question2"   = c("day1_3.Rmd")
)
# define number of points to pass the test and number of students taking the test
pass <- 1
number.students <- 40
set.seed(123)
test <- exams2openolat(exm, n = number.students, name = "R-daily-exams-day1",
points = 1, maxattempts = 0, cutvalue = pass, solutionswitch = FALSE,
duration = 15, nsamp = length(exm[[1]]),
stitle = names(exm), ititle = "Question",
navigation = "linear", shufflesections = TRUE,
adescription = "", sdescription = "",
base64 = FALSE,table = TRUE,
eval = list(partial = T))
remove.packages("exams")
install.packages("exams", repos = "http://R-Forge.R-project.org")
install.packages("exams", repos = "http://R-Forge.R-project.org")
library("exams")
#### day1
setwd("~/Dropbox/#+ Advanced Python & R - MASTER-FOLDER/exams/R/daily/day1")
exm <- list(
"Question1"   = c("day1_2.Rmd"),
"Question2"   = c("day1_3.Rmd")
)
# define number of points to pass the test and number of students taking the test
pass <- 1
number.students <- 40
set.seed(123)
test <- exams2openolat(exm, n = number.students, name = "R-daily-exams-day1",
points = 1, maxattempts = 0, cutvalue = pass, solutionswitch = FALSE,
duration = 15, nsamp = length(exm[[1]]),
stitle = names(exm), ititle = "Question",
navigation = "linear", shufflesections = TRUE,
adescription = "", sdescription = "",
base64 = FALSE,table = TRUE,
eval = list(partial = T))
test <- exams2openolat(exm, n = number.students, name = "R-daily-exams-day1",
points = 1, maxattempts = 0, cutvalue = pass, solutionswitch = FALSE,
duration = 15, nsamp = length(exm[[1]]),
stitle = names(exm), ititle = "Question",
navigation = "linear", shufflesections = TRUE,
adescription = "", sdescription = "",
base64 = FALSE,table = TRUE,
eval = list(partial = T))
